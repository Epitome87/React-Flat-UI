{"version":3,"sources":["components/PaletteMetaForm.jsx","styles/PaletteFormNavStyles.jsx","components/PaletteFormNav.jsx","components/ColorPickerForm.jsx","styles/DraggableColorBoxStyles.jsx","components/DraggableColorBox.jsx","components/DraggableColorList.jsx","components/NewPaletteForm.jsx","styles/sizes.js"],"names":["PaletteMetaForm","palettes","handleSubmitNewPalette","handleHideForm","useState","newPaletteName","setNewPaletteName","formStage","setFormStage","handleClose","ValidatorForm","addValidationRule","value","every","palette","paletteName","toLowerCase","Dialog","open","onClose","DialogTitle","onSelect","emoji","newPalette","native","title","onSubmit","DialogContent","DialogContentText","label","name","onChange","event","target","validators","errorMessages","fullWidth","margin","DialogActions","Button","onClick","color","variant","type","styles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","flexDirection","justifyContent","alignItems","height","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","navBtns","textDecoration","sizes","down","button","padding","AppBar","styled","MuiAppBar","shouldForwardProp","prop","PaletteFormNav","isDrawerOpen","handleDrawerOpen","isFormShowing","setIsFormShowing","style","CssBaseline","position","sx","Toolbar","IconButton","className","edge","mr","Typography","noWrap","component","fontSize","Box","to","ColorPickerForm","paletteIsFull","addNewColor","colors","currentColor","setCurrentColor","newColorName","setNewColorName","useEffect","onChangeComplete","hex","marginTop","onError","errors","console","log","instantValidate","disabled","backgroundColor","DraggableColorBox","props","cursor","marginBottom","transform","boxContent","left","bottom","chroma","luminance","letterSpacing","textTransform","SortableElement","classes","handleDelete","deleteIcon","withStyles","draggableColorBoxStyles","SortableContainer","lineHeight","map","idx","index","Main","flexGrow","spacing","DrawerHeader","mixins","toolbar","NewPaletteForm","savePalette","maxColors","useTheme","navigate","useNavigate","seedColors","setColors","setIsDrawerOpen","length","id","trim","replace","Drawer","flexShrink","boxSizing","anchor","direction","Divider","gutterBottom","allColors","pal","flat","randomColor","Math","floor","random","isDuplicateColor","some","newColor","colorName","filter","axis","onSortEnd","oldIndex","newIndex","arrayMove","distance","up","size","sm","md","lg","xs","xl"],"mappings":"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","file":"static/js/10.1e784fd0.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator';\r\nimport { Picker } from 'emoji-mart';\r\nimport Button from '@mui/material/Button';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport 'emoji-mart/css/emoji-mart.css';\r\n\r\nfunction PaletteMetaForm({ palettes, handleSubmitNewPalette, handleHideForm }) {\r\n  const [newPaletteName, setNewPaletteName] = useState('');\r\n  const [formStage, setFormStage] = useState('paletteName');\r\n\r\n  const handleClose = () => {\r\n    // Why doesn't Colt have to setOpen to false?\r\n    // setOpen(false);\r\n\r\n    handleHideForm();\r\n  };\r\n\r\n  const handlePaletteNameValidatorChange = (event) => {\r\n    setNewPaletteName(event.target.value);\r\n  };\r\n\r\n  // Validation for Palette Name:\r\n  ValidatorForm.addValidationRule('isPaletteNameUnique', (value) => {\r\n    return palettes.every(\r\n      (palette) => palette.paletteName.toLowerCase() !== value.toLowerCase()\r\n    );\r\n  });\r\n\r\n  const handleShowEmojiPicker = () => {\r\n    setFormStage('emoji');\r\n  };\r\n\r\n  const handleSelectEmoji = (emoji) => {\r\n    const newPalette = { paletteName: newPaletteName, emoji: emoji.native };\r\n    setFormStage('');\r\n    handleSubmitNewPalette(newPalette);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog open={formStage === 'emoji'} onClose={handleClose}>\r\n        <DialogTitle>Choose a Palette Emoji</DialogTitle>\r\n        <Picker onSelect={handleSelectEmoji} title='Pick a Palette Emoji' />\r\n      </Dialog>\r\n\r\n      <Dialog open={formStage === 'paletteName'} onClose={handleClose}>\r\n        <DialogTitle>Choose a Palette Name</DialogTitle>\r\n        <ValidatorForm onSubmit={handleShowEmojiPicker}>\r\n          <DialogContent>\r\n            <DialogContentText>\r\n              Please enter a name for your new beautiful palette! Make sure the\r\n              name is unique.\r\n            </DialogContentText>\r\n\r\n            <TextValidator\r\n              label='Palette Name'\r\n              value={newPaletteName}\r\n              name={'newPaletteName'}\r\n              onChange={handlePaletteNameValidatorChange}\r\n              validators={['required', 'isPaletteNameUnique']}\r\n              errorMessages={[\r\n                'Palette name is required',\r\n                'Palette name already exists',\r\n              ]}\r\n              fullWidth\r\n              margin='normal'\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color='primary'>\r\n              Cancel\r\n            </Button>\r\n            <Button variant='contained' color='primary' type='submit'>\r\n              Save Palette\r\n            </Button>\r\n          </DialogActions>\r\n        </ValidatorForm>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PaletteMetaForm;\r\n","import sizes from './sizes';\r\n\r\nconst drawerWidth = 400;\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n\r\n  appBar: {\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    height: '64px',\r\n  },\r\n\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n\r\n  menuButton: {\r\n    marginLeft: '12px',\r\n    marginRight: '20px',\r\n  },\r\n\r\n  navBtns: {\r\n    marginRight: '1rem',\r\n    '& a': {\r\n      textDecoration: 'none',\r\n    },\r\n\r\n    [sizes.down('xs')]: {\r\n      marginRight: '0.5rem',\r\n    },\r\n  },\r\n\r\n  button: {\r\n    margin: '0 0.5rem',\r\n    [sizes.down('xs')]: {\r\n      margin: '0 0.2rem',\r\n      padding: '0.3rem',\r\n    },\r\n  },\r\n\r\n  [sizes.down('xs')]: {\r\n    margin: 0,\r\n  },\r\n});\r\n\r\nexport default styles;\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n// Start requires for Drawer component\r\nimport { styled } from '@mui/material/styles';\r\n// import { withStyles } from '@mui/styles';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport MuiAppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport Typography from '@mui/material/Typography';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport AddToPhotosIcon from '@mui/icons-material/AddToPhotos';\r\n// End requires for Drawer component\r\nimport PaletteMetaForm from './PaletteMetaForm';\r\nimport styles from '../styles//PaletteFormNavStyles';\r\nimport Box from '@mui/material/Box';\r\nimport sizes from '../styles/sizes';\r\n\r\n// TODO: This is being set in NwePaletteForm too, not good\r\nconst drawerWidth = 400;\r\n\r\nconst AppBar = styled(MuiAppBar, {\r\n  shouldForwardProp: (prop) => prop !== 'open',\r\n})(({ theme, open }) => ({\r\n  transition: theme.transitions.create(['margin', 'width'], {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.leavingScreen,\r\n  }),\r\n  ...(open && {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: `${drawerWidth}px`,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  }),\r\n}));\r\n\r\nfunction PaletteFormNav({\r\n  palettes,\r\n  isDrawerOpen,\r\n  handleDrawerOpen,\r\n  handleSubmitNewPalette,\r\n}) {\r\n  const [isFormShowing, setIsFormShowing] = useState(false);\r\n\r\n  const handleShowForm = (event) => {\r\n    setIsFormShowing(true);\r\n  };\r\n\r\n  const handleHideForm = (event) => {\r\n    setIsFormShowing(false);\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: 'flex' }}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position='fixed'\r\n        open={isDrawerOpen}\r\n        color='default'\r\n        sx={{\r\n          flexDirection: 'row',\r\n          justifyContent: 'space-between',\r\n          alignItems: 'center',\r\n          height: '64px',\r\n        }}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            className='menubutton'\r\n            color='inherit'\r\n            aria-label='open drawer'\r\n            onClick={handleDrawerOpen}\r\n            edge='start'\r\n            sx={{ mr: 2, ...(isDrawerOpen && { display: 'none' }) }}\r\n          >\r\n            <AddToPhotosIcon />\r\n          </IconButton>\r\n          <Typography\r\n            variant='h6'\r\n            noWrap\r\n            component='div'\r\n            sx={{\r\n              [sizes.down('xs')]: {\r\n                fontSize: '1rem',\r\n              },\r\n            }}\r\n          >\r\n            Create A Palette!\r\n          </Typography>\r\n        </Toolbar>\r\n\r\n        <Box\r\n          className={styles.navBtns}\r\n          sx={{\r\n            marginRight: '1rem',\r\n            '& a': {\r\n              textDecoration: 'none',\r\n            },\r\n\r\n            [sizes.down('xs')]: {\r\n              marginRight: '0.5rem',\r\n            },\r\n          }}\r\n        >\r\n          <Link to='/' style={{ textDecoration: 'none' }}>\r\n            <Button\r\n              className={styles.button}\r\n              variant='contained'\r\n              color='secondary'\r\n              sx={{\r\n                margin: '0 0.5rem',\r\n                [sizes.down('xs')]: {\r\n                  margin: '0 0.2rem',\r\n                  padding: '0.3rem',\r\n                  fontSize: '0.75rem',\r\n                },\r\n              }}\r\n            >\r\n              Go Back\r\n            </Button>\r\n          </Link>\r\n          <Button\r\n            className={styles.button}\r\n            variant='contained'\r\n            onClick={handleShowForm}\r\n            sx={{\r\n              margin: '0 0.5rem',\r\n              [sizes.down('xs')]: {\r\n                margin: '0 0.2rem',\r\n                padding: '0.3rem',\r\n                fontSize: '0.75rem',\r\n              },\r\n            }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </Box>\r\n      </AppBar>\r\n      {isFormShowing && (\r\n        <PaletteMetaForm\r\n          palettes={palettes}\r\n          handleSubmitNewPalette={handleSubmitNewPalette}\r\n          handleHideForm={handleHideForm}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PaletteFormNav;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport { ChromePicker } from 'react-color';\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'; // Form Validation\r\nimport '../styles/ColorPickerFormStyles.css';\r\n\r\nfunction ColorPickerForm({ paletteIsFull, addNewColor, colors }) {\r\n  // Color State:\r\n  const [currentColor, setCurrentColor] = useState('teal');\r\n\r\n  // Color Name State:\r\n  const [newColorName, setNewColorName] = useState('');\r\n\r\n  const handleChangeComplete = (color, event) => {\r\n    setCurrentColor(color.hex);\r\n  };\r\n\r\n  // Called when the \"Color Name\" text validator receives new input\r\n  const handleColorNameValidatorChange = (event) => {\r\n    setNewColorName(event.target.value);\r\n  };\r\n\r\n  useEffect(() => {}, []);\r\n\r\n  // TODO: Make these validation rules be added once? Yet that seems to break things.\r\n  // Validation for New Color's Name:\r\n  ValidatorForm.addValidationRule('isColorNameUnique', (value) => {\r\n    return colors.every(\r\n      (color) => color.name.toLowerCase() !== value.toLowerCase()\r\n    );\r\n  });\r\n\r\n  // Validation for New Color's...Color\r\n  ValidatorForm.addValidationRule('isColorUnique', (value) => {\r\n    return colors.every((color) => color.color !== currentColor);\r\n  });\r\n\r\n  // Called when the form is submitted: Sets color name to the form's input\r\n  const handleOnSubmit = () => {\r\n    addNewColor({ name: newColorName, color: currentColor });\r\n    setNewColorName('');\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: '100%', display: 'flex', flexDirection: 'column' }}>\r\n      <ChromePicker\r\n        className='ColorPicker'\r\n        color={currentColor}\r\n        onChangeComplete={handleChangeComplete}\r\n        style={{ width: '100% !important', marginTop: '2rem !important' }}\r\n      />\r\n      <ValidatorForm\r\n        onSubmit={handleOnSubmit}\r\n        onError={(errors) => console.log(errors)}\r\n        instantValidate={false}\r\n      >\r\n        <TextValidator\r\n          className='ColorPicker__colorNameInput'\r\n          label='Color Name'\r\n          onChange={handleColorNameValidatorChange}\r\n          variant='filled'\r\n          margin='normal'\r\n          name='newColorName'\r\n          value={newColorName}\r\n          //   placeholder='Color Name'\r\n          validators={['required', 'isColorNameUnique', 'isColorUnique']}\r\n          errorMessages={[\r\n            'Color name is required',\r\n            'Color name must be unique',\r\n            'Color already used',\r\n          ]}\r\n          style={{ width: '100%', height: '70px' }}\r\n        />\r\n        <Button\r\n          className='ColorPicker__addColor'\r\n          variant='contained'\r\n          type='Submit'\r\n          color='primary'\r\n          disabled={paletteIsFull}\r\n          style={{\r\n            backgroundColor: paletteIsFull ? 'grey' : currentColor,\r\n            width: '100%',\r\n            padding: '1rem',\r\n            marginTop: '1rem',\r\n            fontSize: '2rem',\r\n          }}\r\n        >\r\n          {paletteIsFull ? 'Palette Full' : 'Add Color'}\r\n        </Button>\r\n      </ValidatorForm>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ColorPickerForm;\r\n","import sizes from './sizes';\r\nimport chroma from 'chroma-js';\r\n\r\nconst styles = {\r\n  DraggableColorBox: {\r\n    backgroundColor: (props) => props.color,\r\n    width: '20%',\r\n    height: '25%',\r\n    margin: '0 auto',\r\n    display: 'inline-block',\r\n    position: 'relative',\r\n    cursor: 'pointer',\r\n    marginBottom: '-3.5px',\r\n\r\n    // Seem to need to do this, rather than relying on the deleteIcon class\r\n    '& svg': {\r\n      color: 'rgba(0, 0, 0, 0.5)',\r\n      transition: 'all 0.3s ease-in-out',\r\n    },\r\n\r\n    '&:hover svg': {\r\n      color: 'white',\r\n      transform: 'scale(1.5)',\r\n    },\r\n\r\n    [sizes.down('lg')]: {\r\n      width: '25%',\r\n      height: '20%',\r\n    },\r\n\r\n    [sizes.down('md')]: {\r\n      width: '50%',\r\n      height: '10%',\r\n    },\r\n\r\n    [sizes.down('sm')]: {\r\n      width: '100%',\r\n      height: '5%',\r\n    },\r\n  },\r\n\r\n  boxContent: {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    left: '0px',\r\n    bottom: '0px',\r\n    padding: '10px',\r\n    color: (props) =>\r\n      chroma(props.color).luminance() <= 0.08\r\n        ? 'rgba(255, 255, 255, 0.8)'\r\n        : 'rgba(0, 0, 0, 0.6)',\r\n    letterSpacing: '1px',\r\n    textTransform: 'uppercase',\r\n    fontSize: '12px',\r\n\r\n    // Unique to DraggableColorBox over ColorBox\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n  },\r\n\r\n  // Applies properly to the DeleteForeverIcon, but doesn't allow our \"&:hover svg\" class to transition properly\r\n  // deleteIcon: {\r\n  // color: 'rgba(0, 0, 0, 0.5)',\r\n  // transition: 'all 1s ease-in-out',\r\n  // },\r\n};\r\n\r\nexport default styles;\r\n","import React from 'react';\r\nimport { SortableElement } from 'react-sortable-hoc';\r\nimport { withStyles } from '@mui/styles';\r\nimport draggableColorBoxStyles from '../styles/DraggableColorBoxStyles';\r\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\r\n\r\nconst DraggableColorBox = SortableElement(({ name, classes, handleDelete }) => {\r\n  return (\r\n    <div\r\n      className={classes.DraggableColorBox}\r\n      onClick={handleDelete}\r\n      style={{ margin: '-3px 0' }}\r\n    >\r\n      <div className={classes.boxContent}>\r\n        <span>{name}</span>\r\n        <span className={classes.deleteIcon}>\r\n          <DeleteForeverIcon />\r\n        </span>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default withStyles(draggableColorBoxStyles)(DraggableColorBox);\r\n","import React from 'react';\r\nimport DraggableColorBox from './DraggableColorBox';\r\nimport { SortableContainer } from 'react-sortable-hoc';\r\n\r\nfunction DraggableColorList({ colors, handleDelete }) {\r\n  return (\r\n    // Line height seems to fix my ColorBoxes having gaps between one another\r\n    <div style={{ height: '100%', lineHeight: '1.4' }}>\r\n      {colors.map((color, idx) => (\r\n        <DraggableColorBox\r\n          index={idx} // for drag and drop\r\n          key={color.name}\r\n          color={color.color}\r\n          name={color.name}\r\n          handleDelete={() => handleDelete(color.name)}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SortableContainer(DraggableColorList);\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n// Start requires for Drawer component\r\nimport { styled, useTheme } from '@mui/material/styles';\r\nimport PaletteFormNav from './PaletteFormNav';\r\nimport ColorPickerForm from './ColorPickerForm';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Drawer from '@mui/material/Drawer';\r\nimport Typography from '@mui/material/Typography';\r\nimport Divider from '@mui/material/Divider';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\r\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\r\n// End requires for Drawer component\r\n// Drag and Drop!\r\nimport { arrayMove } from 'react-sortable-hoc';\r\nimport DraggableColorList from './DraggableColorList';\r\nimport seedColors from '../seedPalettes';\r\n\r\nconst drawerWidth = 400;\r\n\r\nconst Main = styled('main', { shouldForwardProp: (prop) => prop !== 'open' })(\r\n  ({ theme, open }) => ({\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    // I added padding and height\r\n    // padding: 0,\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: `-${drawerWidth}px`,\r\n    ...(open && {\r\n      transition: theme.transitions.create('margin', {\r\n        easing: theme.transitions.easing.easeOut,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n      marginLeft: 0,\r\n    }),\r\n  })\r\n);\r\n\r\nconst DrawerHeader = styled('div')(({ theme }) => ({\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  padding: theme.spacing(0, 1),\r\n  // necessary for content to be below app bar\r\n  ...theme.mixins.toolbar,\r\n  justifyContent: 'flex-end',\r\n}));\r\n\r\n// Our NewPaletteForm Component\r\nfunction NewPaletteForm({ savePalette, palettes, maxColors = 20 }) {\r\n  const theme = useTheme();\r\n  const navigate = useNavigate();\r\n\r\n  // Form logic States:\r\n  const [colors, setColors] = useState(seedColors[0].colors);\r\n\r\n  // Drawer State (we also pass this to this form's Nav component):\r\n  const [isDrawerOpen, setIsDrawerOpen] = useState(true);\r\n\r\n  /* Drawer Component: Open */\r\n  const handleDrawerOpen = () => {\r\n    setIsDrawerOpen(true);\r\n  };\r\n\r\n  /* Drawer Component: Close */\r\n  const handleDrawerClose = () => {\r\n    setIsDrawerOpen(false);\r\n  };\r\n\r\n  // Form Logic:\r\n  const addNewColor = (newColor) => {\r\n    setColors([...colors, newColor]);\r\n  };\r\n\r\n  // Called when \"Save Palette\" is pressed\r\n  const handleSubmitNewPalette = (newPalette) => {\r\n    // Create a new Palette out of all the information we have constructed\r\n    // Note: Now emoji and paletteName come from PaletteMetaForm, so just add the rest here\r\n    newPalette.id = newPalette.paletteName\r\n      .trim()\r\n      .toLowerCase()\r\n      .replace(/\\s/g, '-');\r\n    newPalette.colors = colors;\r\n\r\n    // Call the parent's (App) callback for palette saving\r\n    savePalette(newPalette);\r\n\r\n    // Navigate back to the home route.\r\n    navigate('/');\r\n  };\r\n\r\n  // Handles deletion of a ColorBox. Called from wihin DraggableColorBox\r\n  const handleDelete = (colorName) => {\r\n    setColors(colors.filter((color) => color.name !== colorName));\r\n  };\r\n\r\n  // Called at the end of a Drag-and-Drop to help re-arrange the items\r\n  const onSortEnd = ({ oldIndex, newIndex }) => {\r\n    setColors([...arrayMove(colors, oldIndex, newIndex)]);\r\n  };\r\n\r\n  // Adds a new, random Color to the Palette\r\n  const handleRandomColor = (event) => {\r\n    // Pick a random color from existing palettes\r\n    // We .flat() it since it is an array of arrays\r\n    const allColors = palettes.map((pal) => pal.colors).flat();\r\n    let randomColor = allColors[Math.floor(Math.random() * allColors.length)];\r\n    // Todo: Ensure this color is unique\r\n    let isDuplicateColor = true;\r\n    while (isDuplicateColor) {\r\n      randomColor = allColors[Math.floor(Math.random() * allColors.length)];\r\n      isDuplicateColor = colors.some(\r\n        (color) => color.name === randomColor.name\r\n      );\r\n    }\r\n\r\n    setColors([...colors, randomColor]);\r\n  };\r\n\r\n  // Clears the Palette by resetting the Colors state to be empty\r\n  const handleClearPalette = (event) => {\r\n    setColors([]);\r\n  };\r\n\r\n  // Helper variable to describe if our Palette is full\r\n  const paletteIsFull = colors.length >= maxColors;\r\n\r\n  return (\r\n    <Box sx={{ display: 'flex' }}>\r\n      <PaletteFormNav\r\n        palettes={palettes}\r\n        handleSubmitNewPalette={handleSubmitNewPalette}\r\n        handleDrawerOpen={handleDrawerOpen}\r\n        isDrawerOpen={isDrawerOpen}\r\n      />\r\n      <Drawer\r\n        sx={{\r\n          width: drawerWidth,\r\n          flexShrink: 0,\r\n          '& .MuiDrawer-paper': {\r\n            width: drawerWidth,\r\n            boxSizing: 'border-box',\r\n          },\r\n        }}\r\n        variant='persistent'\r\n        anchor='left'\r\n        open={isDrawerOpen}\r\n      >\r\n        <DrawerHeader>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'ltr' ? (\r\n              <ChevronLeftIcon />\r\n            ) : (\r\n              <ChevronRightIcon />\r\n            )}\r\n          </IconButton>\r\n        </DrawerHeader>\r\n        <Divider />\r\n        <div\r\n          className='palette-form__drawer-container'\r\n          style={{\r\n            display: 'flex',\r\n            width: '90%',\r\n            height: '100%',\r\n            flexDirection: 'column',\r\n            justifyContent: 'center',\r\n            alignItems: 'center',\r\n\r\n            // Colt doesn't do this\r\n            margin: '0 auto',\r\n          }}\r\n        >\r\n          <Typography variant='h4' gutterBottom>\r\n            Design Your Palette\r\n          </Typography>\r\n\r\n          <div\r\n            className='palette-form__buttons'\r\n            style={{\r\n              width: '100%',\r\n              marginBottom: '1rem',\r\n              display: 'flex',\r\n              justifyContent: 'space-between',\r\n            }}\r\n          >\r\n            <Button\r\n              className='palette-form__button'\r\n              variant='contained'\r\n              color='secondary'\r\n              onClick={handleClearPalette}\r\n              style={{ width: '45%' }}\r\n            >\r\n              Clear Palette\r\n            </Button>\r\n            <Button\r\n              className='palette-form__button'\r\n              variant='contained'\r\n              color='primary'\r\n              disabled={paletteIsFull}\r\n              onClick={handleRandomColor}\r\n              style={{ width: '45%' }}\r\n            >\r\n              Random Color\r\n            </Button>\r\n          </div>\r\n\r\n          <ColorPickerForm\r\n            paletteIsFull={paletteIsFull}\r\n            addNewColor={addNewColor}\r\n            colors={colors}\r\n          />\r\n        </div>\r\n      </Drawer>\r\n      <Main\r\n        open={isDrawerOpen}\r\n        sx={{ height: 'calc(100vh - 64px) !important', padding: '0' }}\r\n      >\r\n        <DrawerHeader />\r\n\r\n        <DraggableColorList\r\n          colors={colors}\r\n          handleDelete={handleDelete}\r\n          axis='xy'\r\n          onSortEnd={onSortEnd}\r\n          // Setting Distance prevents other events from being \"Swalloed\" by our Drag event. By setting a higher distance, we give\r\n          // some wiggle room for distinguishing a regular click from an actual attempted drag. This fixes a bug where it was sometimes hard to\r\n          // delete our ColorBox.\r\n          distance={20}\r\n        />\r\n      </Main>\r\n    </Box>\r\n  );\r\n}\r\n\r\n// export default withStyles(styles, { withThem: true})(NewPaletteForm);\r\nexport default NewPaletteForm;\r\n","const sizes = {\r\n  up(size) {\r\n    const sizes = {\r\n      sx: '575.98px',\r\n      sm: '767.98px',\r\n      md: '991.98px',\r\n      lg: '119.98px',\r\n    };\r\n\r\n    return `@media (min-width: ${sizes[size]})`;\r\n  },\r\n\r\n  down(size) {\r\n    const sizes = {\r\n      xs: '575.98px',\r\n      sm: '767.98px',\r\n      md: '991.98px',\r\n      lg: '1119.98px',\r\n      xl: '1600px',\r\n    };\r\n\r\n    return `@media (max-width: ${sizes[size]})`;\r\n  },\r\n};\r\n\r\nexport default sizes;\r\n"],"sourceRoot":""}